<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>chromist</title>
		<description></description>
		<link>http://chromist.org</link>
		<atom:link href="http://chromist.org/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>Poly, Poly, Polymer - Short introduction</title>
				<description>&lt;p&gt;&lt;img src=&quot;http://www.polymer-project.org/images/logos/webcomponents.png&quot; alt=&quot;Web Components Logo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://goo.gl/PcE1R&quot;&gt;Polymer&lt;/a&gt; 는 Google I/O 2013 에서 처음 소개되었습니다. &lt;a href=&quot;http://goo.gl/tZbhQ&quot;&gt;Web Components&lt;/a&gt; 기반으로 만들어졌으며 Web Components 를 정형화된 방법으로 사용할 수 있는 새로운 Framework 입니다.&lt;/p&gt;

&lt;p&gt;Webapp 을 개발하면서 가장 불편한 점 중에 하나는 표준/공식적인 방법으로 재사용이 가능한 UI Components 를 만들거나 사용하는 방법이 존재 하지 않았습니다. 다른 플랫폼에서 제공하는 Widget 들 처럼 내부 구현이 감추어지고 독립적으로 동작해서 Widget 의 사용법을 알면 되는 것과는 다르게 Boilerplate 한 코드를 매번 사용하거나 서로 다른 방식으로 사용하고 개발자가 간단하게, 이미 알려진 일반적인 방법으로 적용하기가 힘들기 때문에 서로 공유가 되지 않고 한정적으로 사용되었습니다.&lt;/p&gt;

&lt;p&gt;위와 같은 문제를 해결 하기 위한 HTML 표준이 &lt;a href=&quot;http://goo.gl/tZbhQ&quot;&gt;Web Components&lt;/a&gt; 이며, 아래와 같이 5개의 구성요소를 가지고 있으며 개발자가 Custom 하게 만든 Widget 을  생성하고 배포해서 사용하는 방법을 제공하고 있습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://goo.gl/3B0C4&quot;&gt;Shadow DOM&lt;/a&gt;: Shadow DOM 으로 독립적으로 DOM 과 Style 을 가질 수 있습니다.&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; 만들어진 Shadow DOM 은 기존의 Contents 와 독립적으로 Styling 을 유지하고 독립적으로 사용될 수 있어서 재사용이 가능한 Web Components 의 주요 기능이 됩니다.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://goo.gl/0VqcP&quot;&gt;HTML Templates&lt;/a&gt;: 내부에 있는 다른 여러 요소들은 실행/렌더링/재이 되지 않은 비활성화된 DOM 을 사용하여 클라이언트 사이드에서 언제든지 복사(Clone)해서 사용가능합니다.&lt;/li&gt;
  &lt;li&gt;Decorators &lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://goo.gl/EaB7p&quot;&gt;Custom Elements&lt;/a&gt;: 사용자가 새로운 HTML Element 를 만들 수 있습니다. 다른 Custom/General Element 를 이용해서 새로운 Composite Element 를 만들 수 있습니다.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://goo.gl/Bnh0JY&quot;&gt;HTML Imports&lt;/a&gt;: 만들어진 Components 를 패키지로 만들어 배포하고 공유하고 재사용 할 수 있도록 해줍니다.&lt;/li&gt;
  &lt;li&gt;그외로 Keyframe 기반으로 복잡한 Animation 을 지원하는 Web Animations Mutation Observers / MDV 그리고 Pointer Events 가 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/media/polymer-arch.png&quot; alt=&quot;Polymer Architecture&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Polymer 는 위의 그림과 같이 platform.js, polymer.js (Polymer core), Polymer elements 로 구성되어 있습니다. &lt;a href=&quot;http://goo.gl/Ell1s&quot;&gt;platform.js&lt;/a&gt; 는 현재, 모든 모던 브라우저에서 Web Components 를 모두 지원하지 않기 때문에 모던 브라우저에서 Web Components 를 사용할 수 있도록 해주는 Polyfill 프로젝트 입니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.polymer-project.org/polymer.html&quot;&gt;Polymer core&lt;/a&gt; 는 platform.js 를 통해서 Web Components 를 사용하며 Polymer 의 기본적인 사용방법을 제공합니다. &lt;code&gt;polymer-element&lt;/code&gt; 선언하거나 Properties 와 Methods 를 추가할 수 있으며 Element 의 Lifecycle 과 Web Components 이벤트를 제어할 수 있는 방법을 제공합니다.&lt;/p&gt;

&lt;p&gt;마지막으로 Polymer element 는 UI Components 를 포함한 여러가지 응용 element 를 제공합니다.&lt;/p&gt;

&lt;p&gt;현재 Polymer 는 pre-alpha mode 이며 계속 개발되고 발전하고 있는 중입니다. 표준에 친화적이고 다른 Framework 와 달리 덜 &lt;code&gt;Opinionated&lt;/code&gt; 하면서 강력한 기능과 빠른 개발을 할 수 있는 Framework 입니다. 기대하고 관심을 가져보세요. 더 자세한 사용방법은 다음의 자료를 참고하세요.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Google I/O 2013 에서 &lt;a href=&quot;http://goo.gl/xjRdBk&quot;&gt;Web Components 을 소개하는 동영상&lt;/a&gt; 입니다. 중간에 Youtube Widget 을 이용해서 간단히 검색해서 동영상을 보여주는 부분이 인상적입니다.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://goo.gl/v9uH5a&quot;&gt;Eric Bidelman+&lt;/a&gt; 이 작성하는 &lt;a href=&quot;http://goo.gl/oZ7WIb&quot;&gt;Web Components 리소스 모음&lt;/a&gt; 입니다.&lt;/li&gt;
  &lt;li&gt;Google I/O 2013 에서 발표된 슬라이드에 최신 내용을 업데이트 한 것입니다. &lt;a href=&quot;http://goo.gl/Lfacj&quot;&gt;Web Components&lt;/a&gt; 에 대한 새로운 슬라이드입니다. 아래 슬라이드의 최신 버전입니다.
    &lt;ul&gt;
      &lt;li&gt;Google I/O 2013 에서 발표된 &lt;a href=&quot;http://goo.gl/50rV1c&quot;&gt;Web Components&lt;/a&gt; 에 대한 슬라이드입니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://goo.gl/vulIi&quot;&gt;Chromium Dashboard&lt;/a&gt; 는 Polymer 로 만들어진 첫 production app 입니다.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://goo.gl/TfmnFL&quot;&gt;Hello Polymer&lt;/a&gt; 는 Polymer team 에서 간단한 Polymer 소개와 Q&amp;amp;A 에 대한 영상입니다.&lt;/li&gt;
  &lt;li&gt;Mozilla 에서 제공하는 Web Compornts 를 위한 &lt;a href=&quot;http://goo.gl/ZoYNXt&quot;&gt;X-Tag&lt;/a&gt; 라이브러리입니다. 같이 한번 참고하시는 것도 좋겠습니다.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://goo.gl/mvuIi8&quot;&gt;Addy Osmani+&lt;/a&gt; 가 &lt;a href=&quot;http://goo.gl/qaTt1e&quot;&gt;Yeoman 의 Polymer Generator&lt;/a&gt; 를 사용해서 에 필요한 리소스와 코드를 자동으로 생성해서 Polymer 를 바로 사용해 볼 수 있는 방법에 대해서 설명합니다.&lt;/li&gt;
  &lt;li&gt;Github의 &lt;a href=&quot;http://goo.gl/LvzGOy&quot;&gt;Polymer/polymer&lt;/a&gt; 프로젝트 입니다.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://goo.gl/SZlR42&quot;&gt;Future CSS in Web Components&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;Markup encapsulation, Style boundaries. 다만 iframe 을 이용한 구현 방법는 다르게 CORS 문제나 추가적인 Network request 그리고 실제 보여지지 않아도 Redering 을 해야하는 비용에 대해서 고려해야할 필요가 없다. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;다만 Decorators 경우 아직까지 스펙이 없는 상태입니다. &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
				<pubDate>Wed, 23 Oct 2013 00:00:00 +0900</pubDate>
				<link>http://chromist.org/2013/10/23/poly-poly-polymer.html</link>
				<guid isPermaLink="true">http://chromist.org/2013/10/23/poly-poly-polymer.html</guid>
			</item>
		
			<item>
				<title>#performaters at SFHTML5</title>
				<description>&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/-B4S81iHufKY/Uh_6RAeCDkI/AAAAAAAAAAA/rp2DzUgAFJU/w940-h235/event_theme.jpg&quot; alt=&quot;#performaters at SFHTML5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;동부시간 기준으로 2013-09-19 에 샌프란시스코에서 &lt;a href=&quot;http://goo.gl/3ku1xm&quot;&gt;#perfmatters&lt;/a&gt; 들이 #sfhtml5 meetup 에서 Web &lt;a href=&quot;http://goo.gl/7Wxf6&quot;&gt;performance - HTML5 Rocks&lt;/a&gt; 에 대한 주제로 발표와 Q&amp;amp;A가 있었습니다. #perfmatters 는 Google IO 2013&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; 에서 부터 꾸준히 Chrome의 DevTools 와 Under the hood 한 내용을 바탕으로 Web performance 를 개선하는 기술들을 지속적으로 소개하고 있는데 이번 #sfhtml5 meetup 에서는 기존의 발표했던 내용을 정리하고 개선한 것을 &lt;a href=&quot;http://goo.gl/sc9ONj&quot;&gt;YouTube&lt;/a&gt; 를 통해서 한자리에서 모두 볼 수 있습니다.&lt;/p&gt;

&lt;p&gt;첫번째 세션에서는 Performance of Chrome developer relations&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; 의 팀리더인 &lt;a href=&quot;https://plus.google.com/+ColtMcAnlis&quot;&gt;+Colt McAnlis&lt;/a&gt; 이 Javascript 에서 Manual manage(pooling), counting object 그리고 linear growth 등을 이용한 메모리 관리 방법에 대해서 설명합니다. 특히 &lt;a href=&quot;http://goo.gl/A0I95V&quot;&gt;해적처럼 말하기날&lt;/a&gt; 을 맞아서 해적말투로 진행하는 것이 인상적입니다. 그리고 Chrome DevTools 의 Heap monitoring 과 Adobe 의 gcview 를 사용한 heap tracking 을 소개합니다.&lt;/p&gt;

&lt;p&gt;두번째 세션에서는 다른 Bald 인 &lt;a href=&quot;https://plus.google.com/+aerotwist&quot;&gt;+Paul Lewis&lt;/a&gt; 이 Request / Response 이후 Rendering 과정 &lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; 과 Style, image, animation 그리고 scrolling 처리에 사용되는 비용들에 대해서 설명하고 개선시키는 방법을 설명합니다. 다음 세번째 세션은 &lt;a href=&quot;https://plus.google.com/+jakearchibald&quot;&gt;+Jake Archibald&lt;/a&gt; 이 브라우저별로 이미지가 다운로드 되는 여러가지 상황을 코드와 W3C 스펙을 곁들여서 재미있게 설명합니다.&lt;/p&gt;

&lt;p&gt;마지막 세션에서는 &lt;a href=&quot;https://plus.google.com/+PaulIrish&quot;&gt;+Paul Irish&lt;/a&gt; 는 이전&lt;sup id=&quot;fnref:4&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt; 부터 계속 보여주던 스타일 대로 이미 구현된 사이트/앱들을 Chrome DevTools 로 Profiling 하고 개선시키는 데모를 보여줍니다. Frame recording 과 Frame chart 그리고 &lt;a href=&quot;http://goo.gl/Z3IXq&quot;&gt;Continuous painting mode&lt;/a&gt; 를 사용해서 Bottle-neck 과 Pain-point 를 찾아내고 &lt;code&gt;translatez hack&lt;/code&gt; 등을 사용하여 성능을 개선시킵니다. 그외에도 여러가지 Profiling 도구를 소개하는데요 로딩이 진행되는 동안 Rendering 된 화면도 캡처해서 보여주는 &lt;a href=&quot;http://goo.gl/bzCd&quot;&gt;WebPagetest&lt;/a&gt; 이 주목할 만 합니다.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://goo.gl/LeYHsn&quot;&gt;#PERFMATTERS at Google IO 2013&lt;/a&gt; &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;Introduction to Google Developer Relations]( http://goo.gl/sUUL1j ) &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot;&gt;
      &lt;p&gt;HTML parsing, DOM tree creation, Recalculate style with css, Rendering DOM tree, vector / bitmat drawing and decode and Layer composite. &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:4&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://goo.gl/v7CYfm&quot;&gt;Chrome DevTools Timeline’s new Frame Mode - YouTube&lt;/a&gt; &lt;a href=&quot;#fnref:4&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
				<pubDate>Fri, 20 Sep 2013 00:00:00 +0900</pubDate>
				<link>http://chromist.org/2013/09/20/perfmatters-at-sfhtml5.html</link>
				<guid isPermaLink="true">http://chromist.org/2013/09/20/perfmatters-at-sfhtml5.html</guid>
			</item>
		
			<item>
				<title>'Allo, 'Allo! Chrome app launcher</title>
				<description>&lt;p&gt;&lt;img src=&quot;https://storage.googleapis.com/support-kms-prod/SNP_BA510FA08FF9303CA6B06D9B9E1D6E07559F_3141450_en_v1&quot; alt=&quot;Chrome app laucher&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Chrome apps 를 Chrome book(OS) 에서 처럼 별도의 Launcher 를 공개&lt;sup id=&quot;fnref:0&quot;&gt;&lt;a href=&quot;#fn:0&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;했습니다. 보통 Chrome browser 에서 내부 Tab 을 이용해서 Chrome app 을 구동하는 것과는 달리 Chrome book(OS) 에서 처럼 Launcher 를 통해서 바로 실행할 수 있습니다. 현재는 Windows 만을 지원하지만 다른 OS&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; 들도 곧 지원할 예정이라고 합니다. Chrome apps 에서는 지속적으로 Hardware API, Work Offline 그리고 Chrome Less&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; 를 위한 기능들을 추가 해왔는데요, 이제 유저들이 Chrome app launcher 를 사용하는 OS 에 설치한다면 Chrome book(OS) 와 동일한 경험을 가지고 Chrome app 들을 사용할 수 있게 되었습니다.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:0&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://goo.gl/3xzB9F&quot;&gt;Google Chrome Blog: A new breed of Chrome apps&lt;/a&gt; &lt;a href=&quot;#fnref:0&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;Mac, Linux &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;Chrome app 이 실행되는 기본 형태 주소창을 가진 기존 Chrome browser 안에서 실행되는 Webapp 과는 구분 되는 것으로 별도의 Window 를 가진다. 예를 들면 &lt;a href=&quot;http://goo.gl/V1ciT&quot;&gt;Text&lt;/a&gt; 있다. &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
				<pubDate>Mon, 16 Sep 2013 00:00:00 +0900</pubDate>
				<link>http://chromist.org/2013/09/16/chromeapp-launcher.html</link>
				<guid isPermaLink="true">http://chromist.org/2013/09/16/chromeapp-launcher.html</guid>
			</item>
		
	</channel>
</rss>
